import json
import logging
import os
import requests

from slack_bolt import App, Ack, Say
from slack_bolt.adapter.aws_lambda import SlackRequestHandler
from slack_sdk.web import WebClient


SLACK_BOT_TOKEN=os.environ.get("SLACK_BOT_TOKEN")
# SLACK_APP_TOKEN=os.environ.get("SLACK_APP_TOKEN")


styles = [
   {'key': 'Anime', 'name': 'アニメ'},
   {'key': 'Analog Film', 'name': 'アナログフィルム'},
   {'key': 'Comic Book', 'name': 'コミック'},
   {'key': 'Digital Art', 'name': 'デジタル'},
   {'key': 'Fantasy Art', 'name': 'ファンタジー'},
   {'key': 'Pixel Art', 'name': 'ドット絵'},
   {'key': 'watercolor', 'name': '水彩画'}
]


app = App(process_before_response=True, logger=logging.Logger(name='app'))


def respond_to_slack_within_3_seconds(body: dict, ack: Ack):
    ack("Accepted!")


def message_fileshare(message: dict, say: Say , ack: Ack):

    print(json.dumps(message, indent=2))

    if 'files' in message.keys():
      for file in message['files']:

          url_private = file['url_private']
          mimetype = file['mimetype']
          filetype = file['filetype']

          if filetype in ['jpg', 'png']:

            elements = list(map(lambda x : {
                  'type': 'button', 
                  'text': {
                     'type': 'plain_text', 
                     'text': x['name']
                  }, 
                  'value': url_private, 
                  'action_id': x['key']
               }, 
               styles))

            say(
               text='Bedrock?',
               blocks=[
               {
                  'type': 'actions',
                  'elements': elements       
               },
            ])


def action_bedrock(client: WebClient, say: Say , ack: Ack, body:dict):

    print(json.dumps(body, indent=2))

    url = body['actions'][0]['value']
    action_id = body['actions'][0]['action_id']
    channel_id = body['channel']['id']

    import bedrock

    headers={'Authorization': f'Bearer {SLACK_BOT_TOKEN}'}
    image = requests.get(url=url, headers=headers)

    image = bedrock.invoke_bytes(image=image.content, prompt=action_id)

    result = client.files_upload_v2(
        channel=channel_id,
        file=image,
        title='Generated by Stable Diffusion (Bedrock Edition)',
    )


app.event({'type': 'message', 'subtype': 'file_share'})(ack=respond_to_slack_within_3_seconds, lazy=[message_fileshare])

app.action('Anime')(ack=respond_to_slack_within_3_seconds, lazy=[action_bedrock])
app.action('Analog Film')(ack=respond_to_slack_within_3_seconds, lazy=[action_bedrock])
app.action('Comic Book')(ack=respond_to_slack_within_3_seconds, lazy=[action_bedrock])
app.action('Digital Art')(ack=respond_to_slack_within_3_seconds, lazy=[action_bedrock])
app.action('Fantasy Art')(ack=respond_to_slack_within_3_seconds, lazy=[action_bedrock])
app.action('Pixel Art')(ack=respond_to_slack_within_3_seconds, lazy=[action_bedrock])
app.action('watercolor')(ack=respond_to_slack_within_3_seconds, lazy=[action_bedrock])

SlackRequestHandler.clear_all_log_handlers()
logging.basicConfig(format="%(asctime)s %(message)s", level=logging.DEBUG)

def lambda_handler(event, context):
    
    print(event)
    
    slack_handler = SlackRequestHandler(app=app)
    return slack_handler.handle(event, context)
